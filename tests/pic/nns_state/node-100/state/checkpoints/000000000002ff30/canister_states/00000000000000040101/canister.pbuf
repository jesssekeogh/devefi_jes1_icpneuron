∞˛ıˆ(∞	:˙C
È¬≈
¬≈
ÄÄ¿
ÿß÷π3
change_subnet_type_assignment
create_canister
notify_create_canister
notify_mint_cycles
notify_top_up+
)remove_subnet_from_authorized_subnet_list 
set_authorized_subnetwork_list
set_icp_xdr_conversion_rate
transaction_notification
transaction_notification_pb
update_subnet_type%#get_average_icp_xdr_conversion_rateget_build_metadataget_icp_xdr_conversion_rate:8get_principals_authorized_to_create_canisters_to_subnetsget_subnet_types_to_subnetshttp_requestneuron_maturity_modulationtotal_cycles_minted ∞˛*>
ã>
candid:service¯=—=type Cycles = nat;
type BlockIndex = nat64;
type log_visibility = variant {
  controllers;
  public;
};
type CanisterSettings = record {
  controllers : opt vec principal;
  compute_allocation : opt nat;
  memory_allocation : opt nat;
  freezing_threshold : opt nat;
  reserved_cycles_limit : opt nat;
  log_visibility : opt log_visibility;
  wasm_memory_limit : opt nat;
  wasm_memory_threshold : opt nat;
};
type Subaccount = opt blob;
type Memo = opt blob;

// The argument of the [notify_top_up] method.
type NotifyTopUpArg = record {
  // Index of the block on the ICP ledger that contains the payment.
  block_index : BlockIndex;

  // The canister to top up.
  canister_id : principal;
};

type SubnetSelection = variant {
  /// Choose a specific subnet
  Subnet : record {
    subnet : principal;
  };
  /// Choose a random subnet that fulfills the specified properties
  Filter : SubnetFilter;
};

type SubnetFilter = record {
  subnet_type : opt text;
};

// The argument of the [create_canister] method.
type CreateCanisterArg = record {
  // Optional canister settings that, if set, are applied to the newly created canister.
  // If not specified, the caller is the controller of the canister and the other settings are set to default values.
  settings : opt CanisterSettings;

  // An optional subnet type that, if set, determines what type of subnet
  // the new canister will be created on.
  // Deprecated. Use subnet_selection instead.
  subnet_type : opt text;

  // Optional instructions to select on which subnet the new canister will be created on.
  subnet_selection : opt SubnetSelection;
};

// The argument of the [notify_create_canister] method.
type NotifyCreateCanisterArg = record {
  // Index of the block on the ICP ledger that contains the payment.
  block_index : BlockIndex;

  // The controller of canister to create.
  controller : principal;

  // An optional subnet type that, if set, determines what type of subnet
  // the new canister will be created on.
  // Deprecated. Use subnet_selection instead.
  subnet_type : opt text;

  // Optional instructions to select on which subnet the new canister will be created on.
  // vec may contain no more than one element.
  subnet_selection : opt SubnetSelection;

  // Optional canister settings that, if set, are applied to the newly created canister.
  // If not specified, the caller is the controller of the canister and the other settings are set to default values.
  settings : opt CanisterSettings;
};

// Canister creation failed and the cycles attached to the call were returned to the calling canister.
// A small fee may be charged.
type CreateCanisterError = variant {
  Refunded : record {
    // The amount of cycles returned to the calling canister
    refund_amount : nat;

    // The reason why creating a canister failed.
    create_error : text;
  };
  RefundFailed : record {
    // The reason why creating a canister failed.
    create_error : text;

    // The reason why refunding cycles failed.
    refund_error : text;
  };
};

type NotifyError = variant {
  // The payment processing failed and the payment was returned the caller.
  // This is a non-retriable error.
  Refunded : record {
    // The reason for the refund.
    reason : text;
    // The index of the block containing the refund.
    block_index : opt BlockIndex;
  };

  // The same payment is already being processed by a concurrent request.
  // This is a retriable error.
  Processing;

  // The payment was too old to be processed.
  // The value of the variant is the oldest block index that can still be processed.
  // This a non-retriable error.
  TransactionTooOld : BlockIndex;

  // The transaction does not satisfy the cycle minting canister payment protocol.
  // The text contains the description of the problem.
  // This is a non-retriable error.
  InvalidTransaction : text;

  // Other error.
  Other : record { error_code : nat64; error_message : text };
};

type NotifyTopUpResult = variant {
  // The amount of cycles sent to the specified canister.
  Ok : Cycles;
  Err : NotifyError;
};

type CreateCanisterResult = variant {
  // The principal of the newly created canister.
  Ok : principal;
  Err : CreateCanisterError;
};

type NotifyCreateCanisterResult = variant {
  // The principal of the newly created canister.
  Ok : principal;
  Err : NotifyError;
};

type IcpXdrConversionRate = record {
  // The time for which the market data was queried, expressed in UNIX epoch
  // time in seconds.
  timestamp_seconds : nat64;

  // The number of 10,000ths of IMF SDR (currency code XDR) that corresponds
  // to 1 ICP. This value reflects the current market price of one ICP token.
  xdr_permyriad_per_icp : nat64;
};

type IcpXdrConversionRateResponse = record {
  // The latest ICP/XDR conversion rate.
  data : IcpXdrConversionRate;

  // CBOR-serialized hash tree as specified in
  // https://internetcomputer.org/docs/interface-spec/index.html#certification-encoding
  // The hash tree is used for certification and hash the following structure:
  // ```
  // *
  // |
  // +-- ICP_XDR_CONVERSION_RATE -- [ Candid encoded IcpXdrConversionRate ]
  // |
  // `-- AVERAGE_ICP_XDR_CONVERSION_RATE -- [ Candid encoded IcpXdrConversionRate ]
  // ```
  hash_tree : blob;

  // System certificate as specified in
  // https://internetcomputer.org/docs/interface-spec/index.html#certification-encoding
  certificate : blob;
};

type SubnetTypesToSubnetsResponse = record {
  data : vec record { text; vec principal };
};

type PrincipalsAuthorizedToCreateCanistersToSubnetsResponse = record {
  data : vec record { principal; vec principal };
};

type AccountIdentifier = text;

type ExchangeRateCanister = variant {
  /// Enables the exchange rate canister with the given canister ID.
  Set : principal;
  /// Disable the exchange rate canister.
  Unset;
};

type CyclesCanisterInitPayload = record {
  ledger_canister_id : opt principal;
  governance_canister_id : opt principal;
  minting_account_id : opt AccountIdentifier;
  last_purged_notification : opt nat64;
  exchange_rate_canister : opt ExchangeRateCanister;
  cycles_ledger_canister_id : opt principal;
};

type NotifyMintCyclesArg = record {
  block_index : BlockIndex;
  to_subaccount : Subaccount;
  deposit_memo : Memo;
};

type NotifyMintCyclesResult = variant {
  Ok : NotifyMintCyclesSuccess;
  Err : NotifyError;
};

type NotifyMintCyclesSuccess = record {
  // Cycles ledger block index of deposit
  block_index : nat;
  // Amount of cycles that were minted and deposited to the cycles ledger
  minted : nat;
  // New balance of the cycles ledger account
  balance : nat;
};

service : (opt CyclesCanisterInitPayload) -> {
  // Prompts the cycles minting canister to process a payment by converting ICP
  // into cycles and sending the cycles the specified canister.
  notify_top_up : (NotifyTopUpArg) -> (NotifyTopUpResult);

  // Creates a canister using the cycles attached to the function call.
  create_canister : (CreateCanisterArg) -> (CreateCanisterResult);

  // Prompts the cycles minting canister to process a payment for canister creation.
  notify_create_canister : (NotifyCreateCanisterArg) -> (NotifyCreateCanisterResult);

  // Mints cycles and deposits them to the cycles ledger
  notify_mint_cycles : (NotifyMintCyclesArg) -> (NotifyMintCyclesResult);

  // Returns the ICP/XDR conversion rate.
  get_icp_xdr_conversion_rate : () -> (IcpXdrConversionRateResponse) query;

  // Returns the current mapping of subnet types to subnets.
  get_subnet_types_to_subnets : () -> (SubnetTypesToSubnetsResponse) query;

  // Returns the mapping from principals to subnets in which they are authorized
  // to create canisters.
  get_principals_authorized_to_create_canisters_to_subnets : () -> (PrincipalsAuthorizedToCreateCanistersToSubnetsResponse) query;

  get_build_metadata : () -> (text) query;
};
 *w£=Â:ì÷ í“≈bxX}R∑›√TÀ‡~z"W¶√p
`
git_commit_idO)3d0b3f10417fc6708e8b5d844a0bac5e86f3e17d
 qdè3292L§!Lj˜%®üßBA~8K≈-
{<Dj2 Œ€2ÃPù¶£ÏXÌ∏˘LQ-ﬁÏÕàÍ≥h-O»ÁUj|p8@ÄÄÄÄZ
ıˆxë‹à£˚êΩ¸¢  @H´/Ω≠Î•Ç7-Æú©Bæ»‚‹pÈËPZ&,¯≤ ∏Äöû 

       “ @zÛZ          ˙
à˚Ï´ºÃƒ˛Ç                êˆ˘™Ï
P∏•ŒÉ•Úª˛!

Ö∞S]MÚõÛ4„î5 R	˚∆Bıº·•∆´Ñ*!

Ö∞S]MÚõÛ4„î5 R	˚∆Bıº·•∆´Ñ
U∏≥®‹„Úª˛!

Ö∞S]MÚõÛ4„î5 R	˚∆Bıº·•∆´Ñ:$ Œ€2ÃPù¶£ÏXÌ∏˘LQ-ﬁÏÕàÍ≥h-O»ÁUj|p
?»ÌÓïÔÚª˛!

Ö∞S]MÚõÛ4„î5 R	˚∆Bıº·•∆´ÑB


       ≤                ∫ P9'å          ¬  P

                
                
                "
                –⁄nÓÿ∞Ü—Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fÔ¯œ•Ú—Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄n¯œ•Ú—Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fÒ–ñŸ˚—Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄nÚ–ñŸ˚—Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fÛàëòÜ“Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄nÙàëòÜ“Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fıêÕÛè“Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄nˆêÕÛè“Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄f˜Ëﬂµ˚“Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄n¯Ëﬂµ˚“Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄f˘àŸ˙Ñ”Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄n˙àŸ˙Ñ”Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄f˚¿ÅÅè”Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄n¸¿ÅÅè”Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄f˝åô”Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄n˛åô”Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fˇòÀÊÑ‘Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄nÄòÀÊÑ‘Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fÅà“Çé‘Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄nÇà“Çé‘Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄fÉê√ˆó‘Ûª˛WPanicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄nÑê√ˆó‘Ûª˛_[TRAP]: Panicked at 'average_icp_xdr_conversion_rate is not set', rs/nns/cmc/src/main.rs:912:14⁄êÖ®çë¢‘Ûª˛Ä[33m[cycles] conversion rate update: IcpXdrConversionRate { timestamp_seconds: 1728519815, xdr_permyriad_per_icp: 1234567 }[0m⁄<Ü»ó˜î‹Ûª˛-[33m[cycles] setting default subnet list[0m⁄Oá–‘ÜµÊÛª˛@[33m[cycles] serialized state prior to upgrade (1605 bytes)[0m⁄Æà–‘ÜµÊÛª˛ûPanicked at 'Deserialization Failed: "Cannot parse header 286f7074207265636f7264207b206379636c65735f6c65646765725f63616e69737465725f6964203d206f7074207072696e636970616c2022756d3569772d72716161612d61616161712d71616162612d63616922207d29"', rs/rust_canisters/dfn_core/src/endpoint.rs:49:41⁄∂â–‘ÜµÊÛª˛¶[TRAP]: Panicked at 'Deserialization Failed: "Cannot parse header 286f7074207265636f7264207b206379636c65735f6c65646765725f63616e69737465725f6964203d206f7074207072696e636970616c2022756d3569772d72716161612d61616161712d71616162612d63616922207d29"', rs/rust_canisters/dfn_core/src/endpoint.rs:49:41‡äàê 